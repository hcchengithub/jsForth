(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports=function(n,p){function o(){return S[S.length-1]}function u(){return S[S.length-2]}function t(n,p,o,u,t){if(N[P++]=n,N[P++]=o,N[P++]=p,void 0!==t&&(N[P++]=t),"function"==typeof u)N[P++]=u;else{var r=u.split(" ");r.forEach(function(n){N[P++]=isNaN(n)?l[n]:parseInt(n)})}}function r(n,p,o,u){var r=P;l[p]=P+3,H[p]=u,t(M,n,o,u),M=r}function i(n,p,o,u){var r=P;l[p]=P+3,t(M,n,o,u,R),M=r}function T(n,p,o,u){var r=P;l[p]=P+3;var i=P+4,T=function(){return N[i]=u,function(){S.push(i),c()}}();return t(M,n,o,T),P++,M=r,i}function f(){var n="";do{var p=v();if(null===p)return null;var o=String.fromCharCode(p);W!=F?"\\"!==o[0]?(n+=o,n=n.trim()):W=F:10===p&&(W=g)}while(""===n||32!==p&&10!==p&&13!==p);return S.push(n.trim()),n="",!0}function E(){var n=N[X],p=S.pop();do{var o=N[n+2];if(!(N[n+1]&A||o!==p))break;n=N[n]}while(0!==n);S.push(n)}function a(n){var p=N[B];N[p++]=n,N[B]=p}function c(){K+=1,Z=N[K]}function h(n){Z=n}function R(){e.push(K),K=Z,c()}function v(){return 0===G.length?(m=Q,null):G.shift()}for(var s=this,I=n,D=p,O=2,A=1,S=[],e=[],C=2048,l={},N=[],L=0;C>L;L++)N.push(null);{var M=0,P=0,H={};T("BLIMBO","BLIMBO",0,0)}r("EXIT","EXIT",0,function(){K=e.pop(),c()});var B=T("HERE","HERE",0,0),X=T("LATEST","LATEST",0,0),U=T("STATE","STATE",0,0),d=T("BASE","BASE",0,10);r("DUP","DUP",0,function(){S.push(o()),c()}),r("DROP","DROP",0,function(){S.pop(),c()}),r("SWAP","SWAP",0,function(){var n=S.pop(),p=S.pop();S.push(n),S.push(p),c()}),r("OVER","OVER",0,function(){S.push(u()),c()}),r("ROT","ROT",0,function(){var n=S.pop(),p=S.pop(),o=S.pop();S.push(p),S.push(n),S.push(o),c()}),r("2DROP","TWODROP",0,function(){S.pop(),S.pop(),c()}),r("2DUP","TWODUP",0,function(){var n=o(),p=u();S.push(p),S.push(n),c()}),r("2SWAP","TWOSWAP",0,function(){var n=S.pop(),p=S.pop(),o=S.pop(),u=S.pop();S.push(o),S.push(u),S.push(n),S.push(p),c()}),r("?DUP","ZDUP",0,function(){var n=o();0!==n&&S.push(n),c()}),r("1+","INCR",0,function(){S[S.length-1]++,c()}),r("1-","DECR",0,function(){S[S.length-1]--,c()}),r("+","ADD",0,function(){var n=S.pop(),p=S.pop();S.push(n+p),c()}),r("-","SUB",0,function(){var n=S.pop(),p=S.pop();S.push(p-n),c()}),r("*","MUL",0,function(){var n=S.pop(),p=S.pop();S.push(p*n),c()}),r("/MOD","MODDIV",0,function(){var n=S.pop(),p=S.pop();S.push(p%n),S.push(Math.floor(p/n)),c()}),r("/","DIV",0,function(){var n=S.pop(),p=S.pop();S.push(Math.floor(p/n)),c()}),r("=","EQ",0,function(){var n=S.pop(),p=S.pop();S.push(n===p?1:0),c()}),r("<>","NEQ",0,function(){var n=S.pop(),p=S.pop();S.push(n!==p?1:0),c()}),r("<","LT",0,function(){var n=S.pop(),p=S.pop();S.push(n>p?1:0),c()}),r(">","GT",0,function(){var n=S.pop(),p=S.pop();S.push(p>n?1:0),c()}),r("<=","LTE",0,function(){var n=S.pop(),p=S.pop();S.push(n>=p?1:0),c()}),r(">=","GTE",0,function(){var n=S.pop(),p=S.pop();S.push(p>=n?1:0),c()}),r("0=","ZEQ",0,function(){var n=S.pop();S.push(0===n?1:0),c()}),r("0<>","ZNEQ",0,function(){var n=S.pop();S.push(0!==n?1:0),c()}),r("0<","ZLT",0,function(){var n=S.pop();S.push(0>n?1:0),c()}),r("0>","ZGT",0,function(){var n=S.pop();S.push(n>0?1:0),c()}),r("0<=","ZLTE",0,function(){var n=S.pop();S.push(0>=n?1:0),c()}),r("0>=","ZGTE",0,function(){var n=S.pop();S.push(n>=0?1:0),c()}),r("AND","AND",0,function(){var n=S.pop(),p=S.pop();S.push(n&p),c()}),r("OR","OR",0,function(){var n=S.pop(),p=S.pop();S.push(n|p),c()}),r("XOR","XOR",0,function(){var n=S.pop(),p=S.pop();S.push(n^p),c()}),r("INVERT","INVERT",0,function(){var n=S.pop();S.push(!n),c()}),r("BRANCH","BRANCH",0,function(){var n=N[++K];K+=parseInt(n)-1,c()}),r("0BRANCH","ZBRANCH",0,function(){var n=N[++K],p=S.pop();0===p&&(K+=parseInt(n)-1),c()}),r("!","STORE",0,function(){var n=S.pop(),p=S.pop();N[n]=p,c()}),r("@","FETCH",0,function(){var n=S.pop();S.push(N[n]),c()}),r("DEPTH","DEPTH",0,function(){S.push(S.length-1),c()}),r("DSP@","STACK0",0,function(){var n=S.pop();S.push(S[n]),c()}),r(">R","TRSK",0,function(){e.push(S.pop()),c()}),r("R>","FRSK",0,function(){S.push(e.pop()),c()}),r("RDROP","RDROP",0,function(){e.pop(),c()}),r("EMIT","EMIT",0,function(){var n=S.pop();D(n),c()}),r("TELL","TELL",0,function(){for(var n=S.pop(),p=0;p<n.length;p++)D(n.charCodeAt(p));c()}),r("KEY","KEY",0,function(){var n=v();null!==n&&(S.push(n),c())});var g=0,F=1,W=g;r("WORD","WORD",0,function(){null!==f()&&c()}),r("NUMBER","NUMBER",0,function(){var n=N[d],p=S.pop(),o=parseInt(p,n);S.push(o),c()}),r("FIND","FIND",0,function(){E(),c()}),r("CREATE","CREATE",0,function(){var n=N[X],p=N[B],o=S.pop();N[X]=p,N[p++]=n,N[p++]=0,N[p++]=o,N[B]=p,c()}),r(",","COMMA",0,function(){var n=S.pop(),p=N[B];N[B]++,N[p]=n,c()}),r("'","TICK",0,function(){var n=N[++K];S.push(n),c()}),r("LIT","LIT",0,function(){K++;var n=N[K];S.push(parseInt(n)),c()}),r("LITSTRING","LITSTRING",0,function(){K++;var n=N[K];S.push(n),c()}),r("IMMEDIATE","IMMEDIATE",O,function(){var n=N[X];N[n+1]^=O,c()}),r("HIDDEN","HIDDEN",0,function(){var n=S.pop();N[n+1]^=A,c()}),r(">STR","TOSTR",0,function(){var n=S.pop();S.push(String.fromCharCode(n)),c()}),r("?STR","ISSTR",0,function(){var n=S.pop();S.push("string"==typeof n?1:0),c()}),r("INTERPRET","INTERPRET",0,function(){if(null!==f()){var n=o();E();var p=N[U],u=S.pop();if(0!==u){var t=N[u+1]&O,r=u+3;if(!p||t)return void h(r);a(r)}else{var i=N[d],T=parseInt(n,i);if(isNaN(T))return I("Parse Error: "+n+" not found!\n"),void c();p?(a(l.LIT),a(T)):S.push(T)}c()}}),r("CHAR","CHAR",0,function(){if(null!==f()){var n=S.pop(),p=n.charCodeAt(0);S.push(p),c()}}),r("EXECUTE","EXECUTE",0,function(){var n=S.pop();h(n)}),r("DOCOL!","DOCOLSTORE",0,function(){var n=N[B];N[B]++,N[n]=R,c()}),i("-ROT","NROT",0,"ROT ROT EXIT"),i(">CFA","TCFA",0,"LIT 3 ADD EXIT"),i(">DFA","TDFA",0,"LIT 4 ADD EXIT"),i("[","LSBRACKET",O,"LIT 0 STATE STORE EXIT"),i("]","RSBRACKET",0,"LIT 1 STATE STORE EXIT"),i(":","COLON",0,"WORD CREATE DOCOLSTORE LATEST FETCH HIDDEN RSBRACKET EXIT"),i(";","SEMICOLON",O,"LIT EXIT COMMA LATEST FETCH HIDDEN LSBRACKET EXIT"),i("HIDE","HIDE",0,"WORD FIND HIDDEN EXIT"),i("CORE_VERSION","CORE_VERSION",0,"LIT 3 EXIT"),i("MEMORY_SIZE","MEMORY_SIZE",0,"LIT "+C+" EXIT"),i("QUIT","QUIT",0,"INTERPRET BRANCH -2"),N[B]=P,N[X]=M,P=void 0,M=void 0;var K=null,Z=null,V=0,Q=1,G=[],m=V;s.pushIntoInputBuffer=function(n){for(var p=n.length,o=0;p>o;o++)G.push(n.charCodeAt(o));m=V,s.run()},s.run=function(){for(;m==V;){var n=N[Z];n()}},Z=l.QUIT,s.run()};
},{}],2:[function(require,module,exports){
$(document).ready(function(){var n=require("../../lib/jsForth.js"),E="\\ vim: set syntax=forth:\n\\ This file contain the kernel of jsForth, it is everthing that was missing into\n\\ the inner core\n\n: NL 13 ;\n: BL 32 ;\n: CR NL EMIT ;\n: SPACE BL EMIT ;\n\n: TRUE 1 ;\n: FALSE 0 ;\n: NOT 0= ;\n\n: NEGATE 0 SWAP - ;\n\n: LITERAL IMMEDIATE\n    ' LIT ,\n    ,\n    ;\n\n: ':' [ CHAR : ] LITERAL ;\n: '(' [ CHAR ( ] LITERAL ;\n: ')' [ CHAR ) ] LITERAL ;\n: '\"' [ CHAR \" ] LITERAL ; \\ \"\n: 'A' [ CHAR A ] LITERAL ;\n: '0' [ CHAR 0 ] LITERAL ;\n: '-' [ CHAR - ] LITERAL ;\n: '.' [ CHAR . ] LITERAL ;\n\n: [COMPILE] IMMEDIATE\n    WORD\n    FIND\n    >CFA\n    ,\n;\n\n: RECURSE IMMEDIATE\n    LATEST @\n    >CFA\n    ,\n;\n\n\\ Here are the current conditional implemented!\n\\ condition IF [code if true] ELSE [code if false] THEN\n\\ condition IF [code if true] THEN\n\\ not-condition UNLESS [code if false] ELSE [code if true] THEN\n\\ not-condition UNLESS [code if false] THEN\n\\ BEGIN [code] condition UNTIL\n\\ BEGIN [code] AGAIN\n\\ BEGIN condition WHILE [code] REPEAT\n\n: IF IMMEDIATE\n    ' 0BRANCH ,\n    HERE @\n    0 ,\n;\n\n: THEN IMMEDIATE\n    DUP\n    HERE @ SWAP -\n    SWAP !\n;\n\n: ELSE IMMEDIATE\n    ' BRANCH ,\n    HERE @\n    0 ,\n    SWAP\n    DUP\n    HERE @ SWAP -\n    SWAP !\n;\n\n\n: BEGIN IMMEDIATE\n    HERE @\n;\n\n: UNTIL IMMEDIATE\n    ' 0BRANCH ,\n    HERE @ -\n    ,\n;\n\n: AGAIN IMMEDIATE\n    ' BRANCH ,\n    HERE @ -\n    ,\n;\n\n: WHILE IMMEDIATE\n    ' 0BRANCH ,\n    HERE @\n    0 ,\n;\n\n: REPEAT IMMEDIATE\n    ' BRANCH ,\n    SWAP\n    HERE @ - ,\n    DUP\n    HERE @ SWAP -\n    SWAP !\n;\n\n: UNLESS IMMEDIATE\n    ' NOT ,\n    [COMPILE] IF\n;\n\n: DO IMMEDIATE\n    [COMPILE] BEGIN\n    ' >R DUP , ,\n;\n\n: LOOP IMMEDIATE\n    ' R> DUP , ,\n    ' 1+ ,\n    ' 2DUP ,\n    ' = ,\n    [COMPILE] UNTIL\n    ' DROP DUP , ,\n;\n\n: ( IMMEDIATE\n    1\n    BEGIN\n        KEY\n        \\ DUP EMIT We don't need to print them anymore\n        DUP '(' =\n        IF\n              DROP\n              1+\n        ELSE\n            ')' =\n            IF\n                1 -\n            THEN\n        THEN\n    DUP 0= UNTIL\n    DROP\n;\n\n: CASE IMMEDIATE\n        0               ( push 0 to mark the bottom of the stack )\n;\n\n: OF IMMEDIATE\n        ' OVER ,        ( compile OVER )\n        ' = ,           ( compile = )\n        [COMPILE] IF    ( compile IF )\n        ' DROP ,        ( compile DROP )\n;\n\n: ENDOF IMMEDIATE\n        [COMPILE] ELSE  ( ENDOF is the same as ELSE )\n;\n\n: ENDCASE IMMEDIATE\n        ' DROP ,        ( compile DROP )\n        ( keep compiling THEN until we get to our zero marker )\n        BEGIN\n                ?DUP\n        WHILE\n                [COMPILE] THEN\n        REPEAT\n;\n\n: NIP ( x y -- y ) SWAP DROP ;\n: TUCK ( x y -- y x y ) SWAP OVER ;\n: PICK ( x_u ... x_1 x_0 u -- x_u ... x_1 x_0 x_u )\n    \\ TODO\n;\n\n: SPACES ( n -- )\n    BEGIN\n        DUP 0>\n    WHILE\n        SPACE\n        1-\n    REPEAT\n    DROP\n;\n\n: DECIMAL ( -- ) 10 BASE ! ;\n: HEX ( -- ) 16 BASE ! ;\n\n: U. ( u -- )\n    BASE @ /MOD\n    ?DUP IF\n        RECURSE\n    THEN\n\n    DUP 10 <\n    IF\n        '0'\n    ELSE\n        10 -\n        'A'\n    THEN\n    +\n    EMIT\n;\n\n: UWIDTH ( u -- width )\n    BASE @ /\n    ?DUP IF\n        RECURSE 1+\n    ELSE\n        1\n    THEN\n;\n\n: U.R ( u width -- )\n    SWAP\n    DUP\n    UWIDTH\n    ROT\n    SWAP -\n    SPACES\n    U.\n;\n\n: .R ( u width -- )\n    SWAP\n    DUP 0 <\n    IF\n        NEGATE\n        1\n        SWAP\n        ROT\n        1-\n    ELSE\n        0\n        SWAP\n        ROT\n    THEN\n    SWAP\n    DUP\n    UWIDTH\n    ROT\n    SWAP -\n    SPACES\n    SWAP\n    IF\n        '-' EMIT\n    THEN\n    U.\n;\n\n: . ( u -- )\n    DUP\n    ?STR\n    IF\n        '\"' EMIT\n        TELL\n        '\"' EMIT\n        SPACE\n    ELSE\n        0 .R SPACE\n    THEN\n;\n\n: LTNUMBERGT ( u -- ) \\ Print <u>\n    [ CHAR < ] LITERAL EMIT\n    U.\n    [ CHAR > ] LITERAL EMIT\n    SPACE\n;\n\n : .S ( -- )\n     DEPTH DUP ( d d )\n     1+ LTNUMBERGT ( d d+1 -- d )\n     0 ( d cnt )\n     BEGIN\n         2DUP   ( d cnt d cnt )\n         >=     ( d cnt d>=cnt )\n     WHILE\n         DUP    ( d cnt -- d cnt cnt )\n         DSP@ . ( display number )\n         1+     ( d cnt - d cnt+1)\n     REPEAT\n     2DROP      ( d cnt -- )\n     CR\n ;\n\n: U. U. SPACE ;\n\n: .s .S ;\n\n: S\" IMMEDIATE          ( compile: -- ) ( execute: -- string )\n    0 >R\n    BEGIN\n        R> 1+ >R\n        KEY\n        DUP >STR SWAP\n        '\"' =\n    UNTIL\n    DROP\n\n    R>\n    2 -\n\n    BEGIN\n        >R\n        SWAP +\n        R> 1- DUP 0=\n    UNTIL\n    DROP\n\n    STATE @ IF          ( s -- )\n        ' LITSTRING ,\n        ,               ( -- )\n    THEN\n;\n\n: .\" IMMEDIATE\n    [COMPILE] S\"\n\n    STATE @ IF\n        ' TELL ,\n    ELSE\n        TELL CR\n    THEN\n;\n\n: ? @ . ;\n\n: CONSTANT IMMEDIATE\n    WORD CREATE DOCOL!\n    ' LIT ,\n    ,\n    ' EXIT ,\n;\n\n: VALUE IMMEDIATE\n    [COMPILE] CONSTANT\n;\n\n: VARIABLE IMMEDIATE\n    WORD CREATE DOCOL!\n    ' LIT ,\n    HERE @ 2 + ,\n    ' EXIT ,\n    0 ,\n;\n\n: TO IMMEDIATE\n    WORD FIND >DFA 1+\n\n    STATE @ IF\n        ' LIT ,\n        ,\n        ' ! ,\n    ELSE\n        !\n    THEN\n;\n\n: +TO IMMEDIATE\n    WORD FIND >DFA 1+\n\n    STATE @ IF          ( a -- )\n        ' LIT ,\n        ,               ( a -- )\n        ' DUP ,         ( n a -- n a a )\n        ' -ROT ,        ( n a a -- a n a )\n        ' @ ,           ( a n a -- a n v )\n        ' + ,           ( a n v -- a n )\n        ' SWAP ,        ( a n -- n a )\n        ' ! ,\n    ELSE                ( n a -- )\n        DUP             ( n a -- n a a )\n        -ROT            ( n a a -- a n a )\n        @               ( a n a -- a n v )\n        +               ( a n v -- a n )\n        SWAP            ( a n -- n a )\n        !\n    THEN\n;\n\n: >NAME                   ( a -- a )\n    2 +\n;\n\n: ID.\n    >NAME @ TELL\n;\n\n: WORDS\n    LATEST @\n    BEGIN\n        DUP ID. SPACE\n        @ DUP 0=\n    UNTIL\n    CR\n;\n\n: CFA>\n    3 -\n;\n\n0 VALUE TEMP\n\n: I\n    R> R> R>  ( -- r l i )\n    DUP     ( r l i -- r l i i )\n    TO TEMP ( r l i i -- r l i )\n    >R >R >R\n    TEMP\n;\n\n: KERNELF_VERSION 5 ;\n\n: GREETING\n    .\" Welcome to jsForth\" CR\n    .\" jsForth Core Ver #\" CORE_VERSION . CR\n    .\" Forth Kernel Ver #\" KERNELF_VERSION . CR\n    MEMORY_SIZE HERE @ - . .\" free memory cells remaining\" CR\n;\n\nGREETING\n",I=null,T="",A=function(){R.echo(T),T=""},R=$("#term").terminal(function(n){I.pushIntoInputBuffer(n+"\n"),""!==T&&A()},{greetings:"starting jsForth...",name:"jsForth",height:500,prompt:"forth> "}),P=function(n){13===n?A():T+=String.fromCharCode(n)},D=function(n){R.echo(n)};I=new n(D,P),R.echo("Loading forth kernel..."),I.pushIntoInputBuffer(E)});
},{"../../lib/jsForth.js":1}]},{},[2]);
